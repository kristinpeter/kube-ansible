---
# Join Additional Master Nodes to Kubernetes Cluster
# This playbook joins remaining master nodes to the initialized cluster

- name: "*** Join Additional Master Nodes"
  hosts: k8s_masters
  become: yes
  gather_facts: yes
  serial: 1  # Join masters one at a time for safety
  vars_files:
    - "{{ playbook_dir }}/../../group_vars/all.yml"
  
  pre_tasks:
    - name: "Check: Skip primary master (already initialized)"
      meta: end_host
      when: inventory_hostname == groups['k8s_masters'][0]
      
    - name: "Download: Retrieve master join command from primary master"
      slurp:
        src: /tmp/master_join_command
      register: master_join_file
      delegate_to: "{{ groups['k8s_masters'][0] }}"
      become: yes
      when: master_join_command is undefined or master_join_command == ""
      
    - name: "Set: Set master join command from file"
      set_fact:
        master_join_command: "{{ master_join_file.content | b64decode | trim }}"
      when: master_join_file is defined and master_join_file.content is defined
      
    - name: "Generate: Generate fresh master join command (certificates may have expired)"
      shell: |
        kubeadm --kubeconfig=/etc/kubernetes/admin.conf token create --print-join-command --certificate-key \
        $(kubeadm --kubeconfig=/etc/kubernetes/admin.conf init phase upload-certs --upload-certs 2>/dev/null | tail -1)
      register: fresh_master_join_command
      delegate_to: "{{ groups['k8s_masters'][0] }}"
      become: yes
      run_once: true
      
    - name: "Store: Update master join command with fresh certificates"
      set_fact:
        master_join_command: "{{ fresh_master_join_command.stdout | trim }}"
      when: fresh_master_join_command.stdout is defined
      
    - name: "Safety: Verify join command is available"
      fail:
        msg: |
          ==========================================
          ERROR: MASTER JOIN COMMAND NOT FOUND
          ==========================================
          
          The master join command was not generated by the primary master.
          
          This usually means:
          1. Primary master initialization failed
          2. Certificate upload failed  
          3. Token generation failed
          
          Check the primary master initialization logs.
      when: master_join_command is undefined or master_join_command == ""
      
    - name: "Check: Check if this master is already joined"
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_check
      
    - name: "INFO: Master already joined - skipping"
      debug:
        msg: "Master {{ inventory_hostname }} is already part of the cluster"
      when: kubelet_conf_check.stat.exists
      
    - name: "Check: Skip already joined masters"
      meta: end_host
      when: kubelet_conf_check.stat.exists

  tasks:
    - name: "*** Join master to cluster"
      shell: "{{ master_join_command }} --control-plane"
      register: master_join_result
      timeout: 300
      retries: 3
      until: master_join_result is succeeded
      
    - name: "Display: Display join output"
      debug:
        var: master_join_result.stdout_lines
        
    - name: "Create: Create kubectl config directory for ansible user"
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        owner: "{{ ansible_user | default(ansible_ssh_user) }}"
        group: "{{ ansible_user | default(ansible_ssh_user) }}"
        mode: '0755'
      become: yes
      
    - name: "Display: Copy kubectl admin config"
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user | default(ansible_ssh_user) }}"
        group: "{{ ansible_user | default(ansible_ssh_user) }}"
        mode: '0600'
        remote_src: yes
      become: yes
      
    - name: "Wait: Wait for kubelet to start"
      systemd:
        name: kubelet
        state: started
      register: kubelet_start
      retries: 5
      delay: 10
      until: kubelet_start is succeeded
      
    - name: "Wait: Wait for node to join cluster"
      shell: kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes {{ inventory_hostname_short }} --no-headers
      register: node_status
      become: yes
      delegate_to: "{{ groups['k8s_masters'][0] }}"
      retries: 12
      delay: 10
      until: node_status is succeeded
      vars:
        inventory_hostname_short: "{{ inventory_hostname.split('.')[0] }}"
      
    - name: "Verify: Verify master node joined successfully"
      shell: kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes {{ inventory_hostname_short }} -o wide
      register: master_node_info
      become: yes
      delegate_to: "{{ groups['k8s_masters'][0] }}"
      vars:
        inventory_hostname_short: "{{ inventory_hostname.split('.')[0] }}"
      
    - name: "Summary: Master join summary"
      debug:
        msg:
          - "=== MASTER JOINED SUCCESSFULLY ==="
          - "Node: {{ inventory_hostname }}"
          - "Status: {{ master_node_info.stdout_lines }}"
          - ""
          - "Verify: Master is ready for workloads"

  post_tasks:
    - name: "Summary: All masters join summary"
      debug:
        msg:
          - "=== ALL MASTERS JOINED ==="
          - "Total Masters: {{ groups['k8s_masters'] | length }}"
          - "Primary Master: {{ groups['k8s_masters'][0] }}"
          - "Additional Masters: {{ groups['k8s_masters'] | difference([groups['k8s_masters'][0]]) | length }}"
          - ""
          - "Verify: Master nodes are ready for worker node joining"
      run_once: true
      when: inventory_hostname != groups['k8s_masters'][0]